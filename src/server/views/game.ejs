<%- include('./shared/head') %>

<div class="game-container">
  <div class="game-header">
    <h1><%= game.name %></h1>
    <div class="game-status">
      <% if (game.started) { %>
        <span class="status-badge status-active">Game in Progress</span>
      <% } else { %>
        <span class="status-badge status-waiting">Waiting for Players</span>
      <% } %>
    </div>
  </div>
  
  <div class="game-content">
    <div class="game-board">
      <% if (!game.started) { %>
        <div class="waiting-screen">
          <h2>Waiting for Players</h2>
          <p>Current players: <%= players.length %> / <%= game.max_players %></p>
          <p>Minimum players needed: <%= game.min_players %></p>
          
          <div class="player-list">
            <% players.forEach(player => { %>
              <div class="player-item">
                <img src="<%= player.gravatar %>" alt="<%= player.email %>" class="player-avatar">
                <span class="player-name"><%= player.email %></span>
                <% if (game.created_by === player.user_id) { %>
                  <span class="host-badge">Host</span>
                <% } %>
              </div>
            <% }); %>
          </div>
          
          <% if (isCreator && canStart) { %>
            <button id="start-game-btn" class="btn btn-primary">Start Game</button>
          <% } else if (isCreator && !canStart) { %>
            <button class="btn btn-disabled" disabled>Need <%= game.min_players - players.length %> More Player(s)</button>
          <% } else { %>
            <p>Waiting for host to start the game...</p>
          <% } %>
        </div>
      <% } else { %>
        <div class="game-play-area">
          <div class="players-area">
            <div class="players-list" id="players-list">
              <!-- Players will be rendered here by JavaScript -->
            </div>
          </div>
          
          <div class="play-area">
            <div class="discard-pile" id="discard-pile">
              <!-- Top card will be rendered here by JavaScript -->
            </div>
            
            <div class="deck-pile" id="deck-pile">
              <div class="card card-back">
                <div class="card-inner">UNO</div>
              </div>
            </div>
          </div>
          
          <div class="player-hand" id="player-hand">
            <!-- Player's cards will be rendered here by JavaScript -->
          </div>
          
          <div class="game-controls">
            <button id="draw-card-btn" class="btn btn-primary">Draw Card</button>
            <div id="color-chooser" class="color-chooser">
              <h3>Choose a color:</h3>
              <div class="color-options">
                <button class="color-btn red" data-color="red"></button>
                <button class="color-btn blue" data-color="blue"></button>
                <button class="color-btn green" data-color="green"></button>
                <button class="color-btn yellow" data-color="yellow"></button>
              </div>
            </div>
          </div>
        </div>
      <% } %>
    </div>
    
    <div class="game-sidebar">
      <div class="chat-container">
        <div class="chat-header">
          <h2>Game Chat</h2>
        </div>
        
        <div class="chat-messages" id="chat-messages">
          <!-- Chat messages will be rendered here by JavaScript -->
        </div>
        
        <div class="chat-input">
          <form id="chat-form">
            <input type="text" id="chat-message" placeholder="Type a message..." autocomplete="off">
            <button type="submit" class="btn btn-primary">Send</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<div id="game-notification" class="game-notification">
  <div class="notification-content">
    <p id="notification-message"></p>
  </div>
</div>

<div id="color-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>Choose a Color</h2>
    </div>
    <div class="modal-body">
      <div class="color-options">
        <button class="color-btn red" data-color="red"></button>
        <button class="color-btn blue" data-color="blue"></button>
        <button class="color-btn green" data-color="green"></button>
        <button class="color-btn yellow" data-color="yellow"></button>
      </div>
    </div>
  </div>
</div>

<style>
  .game-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .game-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .game-header h1 {
    font-size: 2rem;
    margin: 0;
  }
  
  .status-badge {
    padding: 5px 10px;
    border-radius: 4px;
    font-weight: bold;
  }
  
  .status-waiting {
    background-color: #e6f7ff;
    color: #1890ff;
  }
  
  .status-active {
    background-color: #f6ffed;
    color: #52c41a;
  }
  
  .game-content {
    display: grid;
    grid-template-columns: 3fr 1fr;
    gap: 20px;
  }
  
  .game-board {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    padding: 20px;
    min-height: 600px;
  }
  
  .waiting-screen {
    text-align: center;
    padding: 40px 0;
  }
  
  .waiting-screen h2 {
    font-size: 1.8rem;
    margin-bottom: 20px;
  }
  
  .player-list {
    margin: 30px 0;
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 400px;
    margin: 30px auto;
  }
  
  .player-item {
    display: flex;
    align-items: center;
    padding: 10px;
    background-color: #f5f5f5;
    border-radius: 6px;
  }
  
  .player-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
  }
  
  .player-name {
    flex: 1;
    font-weight: 500;
  }
  
  .host-badge {
    background-color: #faad14;
    color: #fff;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 0.8rem;
  }
  
  .btn {
    display: inline-block;
    padding: 10px 20px;
    border-radius: 6px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s;
    cursor: pointer;
    border: none;
  }
  
  .btn-primary {
    background-color: #1890ff;
    color: white;
  }
  
  .btn-primary:hover {
    background-color: #0c7cd5;
  }
  
  .btn-disabled {
    background-color: #d9d9d9;
    color: #666;
    cursor: not-allowed;
  }
  
  .game-play-area {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  
  .players-area {
    margin-bottom: 20px;
  }
  
  .players-list {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
  }
  
  .player-card {
    background-color: #f5f5f5;
    border-radius: 6px;
    padding: 10px;
    display: flex;
    align-items: center;
    min-width: 150px;
  }
  
  .player-card.current {
    background-color: #e6f7ff;
    border: 2px solid #1890ff;
  }
  
  .player-card-avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    margin-right: 10px;
  }
  
  .player-card-info {
    flex: 1;
  }
  
  .player-card-name {
    font-weight: 500;
    margin-bottom: 2px;
  }
  
  .player-card-cards {
    font-size: 0.8rem;
    color: #666;
  }
  
  .play-area {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 40px;
    margin: 40px 0;
    min-height: 200px;
  }
  
  .discard-pile, .deck-pile {
    position: relative;
    width: 120px;
    height: 180px;
  }
  
  .card {
    width: 100%;
    height: 100%;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    font-size: 24px;
    position: absolute;
    transition: transform 0.3s;
  }
  
  .card-back {
    background: linear-gradient(45deg, #ff4d4f, #1890ff, #52c41a, #fadb14);
    color: white;
  }
  
  .card-red {
    background-color: #ff4d4f;
    color: white;
  }
  
  .card-blue {
    background-color: #1890ff;
    color: white;
  }
  
  .card-green {
    background-color: #52c41a;
    color: white;
  }
  
  .card-yellow {
    background-color: #fadb14;
    color: black;
  }
  
  .card-wild {
    background: linear-gradient(45deg, #ff4d4f, #1890ff, #52c41a, #fadb14);
    color: white;
  }
  
  .player-hand {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 10px;
    margin-bottom: 20px;
  }
  
  .hand-card {
    width: 80px;
    height: 120px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    font-size: 18px;
    cursor: pointer;
    transition: transform 0.2s;
  }
  
  .hand-card:hover {
    transform: translateY(-10px);
  }
  
  .hand-card.disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  .game-controls {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 20px;
  }
  
  .color-chooser {
    display: none;
    background-color: #f5f5f5;
    padding: 15px;
    border-radius: 8px;
    text-align: center;
  }
  
  .color-options {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 10px;
  }
  
  .color-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: none;
    cursor: pointer;
    transition: transform 0.2s;
  }
  
  .color-btn:hover {
    transform: scale(1.1);
  }
  
  .color-btn.red {
    background-color: #ff4d4f;
  }
  
  .color-btn.blue {
    background-color: #1890ff;
  }
  
  .color-btn.green {
    background-color: #52c41a;
  }
  
  .color-btn.yellow {
    background-color: #fadb14;
  }
  
  .game-sidebar {
    display: flex;
    flex-direction: column;
  }
  
  .chat-container {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  
  .chat-header {
    padding: 15px;
    border-bottom: 1px solid #eee;
  }
  
  .chat-header h2 {
    margin: 0;
    font-size: 1.2rem;
  }
  
  .chat-messages {
    flex: 1;
    padding: 15px;
    overflow-y: auto;
    max-height: 500px;
  }
  
  .chat-message {
    margin-bottom: 15px;
    display: flex;
  }
  
  .chat-message-avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    margin-right: 10px;
  }
  
  .chat-message-content {
    flex: 1;
  }
  
  .chat-message-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
  }
  
  .chat-message-name {
    font-weight: 500;
  }
  
  .chat-message-time {
    font-size: 0.8rem;
    color: #999;
  }
  
  .chat-message-text {
    background-color: #f5f5f5;
    padding: 8px 12px;
    border-radius: 6px;
  }
  
  .chat-input {
    padding: 15px;
    border-top: 1px solid #eee;
  }
  
  .chat-input form {
    display: flex;
    gap: 10px;
  }
  
  .chat-input input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
  }
  
  .game-notification {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 10px 20px;
    border-radius: 6px;
    z-index: 1000;
    display: none;
  }
  
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }
  
  .modal-content {
    background-color: white;
    margin: 15% auto;
    padding: 20px;
    border-radius: 10px;
    width: 300px;
    text-align: center;
  }
  
  .modal-header {
    margin-bottom: 20px;
  }
  
  .modal-header h2 {
    margin: 0;
  }
  
  @media (max-width: 768px) {
    .game-content {
      grid-template-columns: 1fr;
    }
    
    .play-area {
      flex-direction: column;
      gap: 20px;
    }
  }
</style>

<script src="/socket.io/socket.io.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Connect to Socket.io
    const socket = io();
    
    // Game variables
    const gameId = '<%= game.id %>';
    const currentUserId = '<%= currentUserId %>';
    let selectedCard = null;
    let isMyTurn = false;
    
    // DOM elements
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-message');
    const chatMessages = document.getElementById('chat-messages');
    const startGameBtn = document.getElementById('start-game-btn');
    const playersList = document.getElementById('players-list');
    const playerHand = document.getElementById('player-hand');
    const discardPile = document.getElementById('discard-pile');
    const drawCardBtn = document.getElementById('draw-card-btn');
    const colorChooser = document.getElementById('color-chooser');
    const colorBtns = document.querySelectorAll('.color-btn');
    const notification = document.getElementById('game-notification');
    const notificationMessage = document.getElementById('notification-message');
    const colorModal = document.getElementById('color-modal');
    const modalColorBtns = document.querySelectorAll('#color-modal .color-btn');
    
    // Join game room
    socket.emit('join-game', { gameId });
    
    // Chat functionality
    if (chatForm) {
      chatForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const message = chatInput.value.trim();
        if (message) {
          socket.emit('chat-message', { gameId, message });
          chatInput.value = '';
        }
      });
    }
    
    // Start game
    if (startGameBtn) {
      startGameBtn.addEventListener('click', function() {
        socket.emit('start-game', { gameId });
      });
    }
    
    // Draw card
    if (drawCardBtn) {
      drawCardBtn.addEventListener('click', function() {
        if (isMyTurn) {
          socket.emit('draw-card', { gameId });
        } else {
          showNotification("It's not your turn");
        }
      });
    }
    
    // Color buttons
    if (colorBtns) {
      colorBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const color = this.getAttribute('data-color');
          if (selectedCard) {
            socket.emit('play-card', { gameId, cardId: selectedCard, chosenColor: color });
            colorChooser.style.display = 'none';
            selectedCard = null;
          }
        });
      });
    }
    
    // Modal color buttons
    if (modalColorBtns) {
      modalColorBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const color = this.getAttribute('data-color');
          if (selectedCard) {
            socket.emit('play-card', { gameId, cardId: selectedCard, chosenColor: color });
            colorModal.style.display = 'none';
            selectedCard = null;
          }
        });
      });
    }
    
    // Socket events
    socket.on('chat-message', function(data) {
      addChatMessage(data);
    });
    
    socket.on('game-started', function() {
      window.location.reload();
    });
    
    socket.on('game-update', function(data) {
      if (playerHand) {
        renderHand(data.hand);
      }
      
      if (discardPile) {
        renderDiscardPile(data.topCard);
      }
      
      if (playersList) {
        renderPlayers(data.players, data.currentPlayer);
      }
      
      isMyTurn = data.isYourTurn;
      updateGameControls();
    });
    
    socket.on('game-state-update', function(data) {
      if (playersList) {
        renderPlayers(data.players, data.currentPlayer);
      }
      
      if (discardPile) {
        renderDiscardPile(data.topCard);
      }
    });
    
    socket.on('hand-update', function(data) {
      if (playerHand) {
        renderHand(data.hand);
      }
      
      isMyTurn = data.isYourTurn;
      updateGameControls();
      
      if (data.isYourTurn) {
        showNotification("It's your turn");
      }
    });
    
    socket.on('game-over', function(data) {
      const isWinner = data.winnerId === currentUserId;
      if (isWinner) {
        showNotification("You won the game!");
      } else {
        showNotification("Player won the game!");
      }
      
      setTimeout(() => {
        window.location.href = '/lobby?success=Game completed';
      }, 3000);
    });
    
    socket.on('error', function(data) {
      showNotification(data.message);
    });
    
    // Helper functions
    function addChatMessage(data) {
      if (!chatMessages) return;
      
      const messageDiv = document.createElement('div');
      messageDiv.className = 'chat-message';
      
      const time = new Date(data.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      
      messageDiv.innerHTML = `
        <img src="${data.gravatar}" alt="${data.email}" class="chat-message-avatar">
        <div class="chat-message-content">
          <div class="chat-message-header">
            <span class="chat-message-name">${data.email}</span>
            <span class="chat-message-time">${time}</span>
          </div>
          <div class="chat-message-text">${data.message}</div>
        </div>
      `;
      
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    function renderHand(cards) {
      if (!playerHand) return;
      
      playerHand.innerHTML = '';
      
      if (!cards || cards.length === 0) {
        playerHand.innerHTML = '<p>No cards in hand</p>';
        return;
      }
      
      cards.forEach(card => {
        const cardDiv = document.createElement('div');
        cardDiv.className = `hand-card card-${card.color} ${!isMyTurn ? 'disabled' : ''}`;
        cardDiv.setAttribute('data-id', card.id);
        cardDiv.setAttribute('data-color', card.color);
        cardDiv.setAttribute('data-value', card.value);
        
        let cardText = card.value;
        if (card.value === 'wild') {
          cardText = 'W';
        } else if (card.value === 'wild_draw_four') {
          cardText = '+4';
        } else if (card.value === 'draw_two') {
          cardText = '+2';
        } else if (card.value === 'skip') {
          cardText = '⊘';
        } else if (card.value === 'reverse') {
          cardText = '⟲';
        }
        
        cardDiv.innerHTML = `<div class="card-inner">${cardText}</div>`;
        
        if (isMyTurn) {
          cardDiv.addEventListener('click', function() {
            if (card.color === 'wild') {
              selectedCard = card.id;
              colorModal.style.display = 'block';
            } else {
              socket.emit('play-card', { gameId, cardId: card.id });
            }
          });
        }
        
        playerHand.appendChild(cardDiv);
      });
    }
    
    function renderDiscardPile(card) {
      if (!discardPile) return;
      
      discardPile.innerHTML = '';
      
      if (!card) {
        discardPile.innerHTML = '<div class="card card-back"><div class="card-inner">?</div></div>';
        return;
      }
      
      const cardDiv = document.createElement('div');
      cardDiv.className = `card card-${card.color}`;
      
      let cardText = card.value;
      if (card.value === 'wild' || card.value === 'wild_draw_four') {
        cardText = card.value === 'wild' ? 'W' : '+4';
      } else if (card.value === 'draw_two') {
        cardText = '+2';
      } else if (card.value === 'skip') {
        cardText = '⊘';
      } else if (card.value === 'reverse') {
        cardText = '⟲';
      }
      
      cardDiv.innerHTML = `<div class="card-inner">${cardText}</div>`;
      discardPile.appendChild(cardDiv);
    }
    
    function renderPlayers(players, currentPlayerId) {
      if (!playersList) return;
      
      playersList.innerHTML = '';
      
      if (!players || players.length === 0) {
        playersList.innerHTML = '<p>No players</p>';
        return;
      }
      
      players.forEach(player => {
        const playerDiv = document.createElement('div');
        playerDiv.className = `player-card ${player.user_id === currentPlayerId ? 'current' : ''}`;
        
        playerDiv.innerHTML = `
          <img src="${player.gravatar}" alt="${player.email}" class="player-card-avatar">
          <div class="player-card-info">
            <div class="player-card-name">${player.email}</div>
            <div class="player-card-cards">${player.card_count} cards</div>
          </div>
        `;
        
        playersList.appendChild(playerDiv);
      });
    }
    
    function updateGameControls() {
      if (drawCardBtn) {
        drawCardBtn.disabled = !isMyTurn;
        drawCardBtn.className = isMyTurn ? 'btn btn-primary' : 'btn btn-disabled';
      }
      
      if (playerHand) {
        const cards = playerHand.querySelectorAll('.hand-card');
        cards.forEach(card => {
          if (isMyTurn) {
            card.classList.remove('disabled');
          } else {
            card.classList.add('disabled');
          }
        });
      }
    }
    
    function showNotification(message) {
      if (!notification || !notificationMessage) return;
      
      notificationMessage.textContent = message;
      notification.style.display = 'block';
      
      setTimeout(() => {
        notification.style.display = 'none';
      }, 3000);
    }
  });
</script>

<%- include('./shared/menu') %>
